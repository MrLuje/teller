// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/pass.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPassClient is a mock of PassClient interface.
type MockPassClient struct {
	ctrl     *gomock.Controller
	recorder *MockPassClientMockRecorder
}

// MockPassClientMockRecorder is the mock recorder for MockPassClient.
type MockPassClientMockRecorder struct {
	mock *MockPassClient
}

// NewMockPassClient creates a new mock instance.
func NewMockPassClient(ctrl *gomock.Controller) *MockPassClient {
	mock := &MockPassClient{ctrl: ctrl}
	mock.recorder = &MockPassClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassClient) EXPECT() *MockPassClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPassClient) Get(path string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPassClientMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPassClient)(nil).Get), path)
}

// Set mocks base method.
func (m *MockPassClient) Set(path, val string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", path, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockPassClientMockRecorder) Set(path, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPassClient)(nil).Set), path, val)
}

// SetMultiple mocks base method.
func (m_2 *MockPassClient) SetMultiple(keyPath string, m map[string]string) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SetMultiple", keyPath, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMultiple indicates an expected call of SetMultiple.
func (mr *MockPassClientMockRecorder) SetMultiple(keyPath, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMultiple", reflect.TypeOf((*MockPassClient)(nil).SetMultiple), keyPath, m)
}
